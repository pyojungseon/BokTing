import pymysql
import sys
import configparser

class MariaDB:

    conn = None
    env = None

    def __init__(self, _env):
        print("DB Construcor : %s" % _env)
        self.env = _env

    def __del__(self):
        print("DB Destructor")
        self.conn.close()

    def getDBConfig(self):
        properties = configparser.ConfigParser()
        properties.read('./config/DBconfig.ini')
        if(self.env=='T'):
            props = properties["TEST"]
        else:
            props = properties["PROD"]
        print("DB Mode : %s" % props["env"])
        return props

    def dbConnection(self):
        props = self.getDBConfig()
        _host = props["host"]
        _user = props["user"]
        _password = props["password"]
        _db = props["db"]
        _charset=props["charset"]
        print(props)
        self.conn = pymysql.connect(host=_host, user=_user, password=_password, db=_db, charset=_charset)

    def getUserData(self, telegramID):
        cur = self.conn.cursor()
        sql = 'select * from UserTBL where telegramID ='+str(telegramID)
        cur.execute(sql)
        userData = []
        while(True):
            row = cur.fetchone()
            if row==None:
                break
            userData = row
            print("%s %s %s %s %s %s %s" 
                %(userData[0],userData[1], userData[2], userData[3], userData[4], userData[5], userData[6]))
        return userData
    
    def getMateData(self, telegramID):
        cur = self.conn.cursor()
        sql = 'select * from MateTBL where telegramID ='+str(telegramID)
        cur.execute(sql)
        mateData = []
        while(True):
            row = cur.fetchone()
            if row==None:
                break
            mateData.append(row)
        return mateData

    def insertUserData(self, userData):
        cur = self.conn.cursor()
        try:
            sql = "insert into UserTBL values('"+userData[0]+"','"+userData[1]+"','"+userData[2]+"','"+userData[3]+"','Y',current_timestamp,current_timestamp)"
            print(sql)
            cur.execute(sql)
        except Exception as ex:
            print("user insert error")
            print(ex)
        self.conn.commit()

    def insertLogData(self, textMsg):
        cur = self.conn.cursor()
        print("%s %s %s" %(textMsg[0], textMsg[2], textMsg[1]))
        try:
            sql = "insert into LogTBL values('"+str(textMsg[0])+"','"+textMsg[1]+"','"+textMsg[2]+"',current_timestamp)"
            print(sql)
            cur.execute(sql)
        except Exception as ex:
            print("log insert error")
            print(ex)
        self.conn.commit()

    def insertMateData(self, mateData):
        cur = self.conn.cursor()
        try:
            sql = "insert into MateTBL(telegramID, name, sex, tall, age, company, area, phoneNumber, regDate, modDate) values('"+str(mateData[8])+"','"+mateData[1]+"','"+mateData[2]+"','"+str(mateData[3])+"','"+str(mateData[4])+"','"+mateData[5]+"','"+mateData[6]+"','"+str(mateData[7])+"',current_timestamp,current_timestamp)"
            print(sql)
            cur.execute(sql)
        except Exception as ex:
            print("mate insert error")
            print(ex)
        self.conn.commit()

    def deleteMateData(self, mateData):
        cur = self.conn.cursor()
        try:
            sql="delete from MateTBL where telegramID='"+str(mateData[0])+"' and name='"+mateData[1]+"'"
            print(sql)
            cur.execute(sql)
        except Exception as ex:
            print("mate delete error")
            print(ex)
        self.conn.commit()


    def insertReqData(self, reqData):
        cur = self.conn.cursor()
        try:
            sql="insert into ReqTBL values('"+str(reqData[6])+"','"+reqData[1]+"','"+str(reqData[2])+"','"+str(reqData[3])+"','"+str(reqData[4])+"','"+str(reqData[5])+"',NULL,current_timestamp,current_timestamp)"
            print(sql)
            cur.execute(sql)
        except Exception as ex:
            print("req insert error")
            print(ex)
        self.conn.commit()


    def deleteReqData(self, reqData):
        cur = self.conn.cursor()
        try:
            sql="delete from ReqTBL where telegramID='"+str(reqData[0])+"' and name='"+reqData[1]+"'"
            print(sql)
            cur.execute(sql)
        except Exception as ex:
            print("req delete error")
            print(ex)
        self.conn.commit()
    
    def getReqData(self, reqData):
        cur = self.conn.cursor()
        sql = "select * from ReqTBL where telegramID ='"+str(reqData[1])+"'and name='"+reqData[0]+"'"
        cur.execute(sql)
        reqData = []
        while(True):
            row = cur.fetchone()
            if row==None:
                break
            reqData.append(row)
        return reqData

